apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion configVersion.sdk
    defaultConfig {
        applicationId "id.gits.gitsmvvmkotlin"
        minSdkVersion configVersion.minSdk
        targetSdkVersion configVersion.sdk
        versionCode configVersion.code
        versionName configVersion.name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        released {
            // TODO: Check for your own environment, and set the password env with ur own pass
            storeFile file("${rootDir}/generalkey.jks")
            storePassword System.getenv("PASSWORD")
            keyAlias "12345678"
            keyPassword System.getenv("PASSWORD")
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'

        test {
            java.srcDir sharedTestDir
        }

        androidTest {
            java.srcDir sharedTestDir
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", '"http://api.themoviedb.org/"'
        }

        debug {
            buildConfigField "String", "BASE_URL", '"https://google.com"'
        }

        stagging {
            buildConfigField "String", "BASE_URL", '"https://youtube.com"'
        }
    }

    flavorDimensions "default"
    productFlavors {
        prod {
            applicationIdSuffix ".production"
            signingConfig signingConfigs.released
        }

        dev {
            applicationIdSuffix ".development"
        }

        stag {
            applicationIdSuffix ".stagging"
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.mergedFlavor.versionName = android.defaultConfig.versionName
        }

        if (variant.buildType.name == 'debug') {
            variant.mergedFlavor.versionName = android.defaultConfig.versionName
        }

        if (variant.buildType.name == 'stagging') {
            variant.mergedFlavor.versionName = android.defaultConfig.versionName
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${appName}-${variant.versionName}-${formattedDate}-${variant.flavorName}.apk"
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets { main { java.srcDirs = ['src/main/java', 'src/main/java/mock'] } }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Support Library Dependencies
    implementation supportDependencies.kotlin
    implementation supportDependencies.appCompat
    implementation supportDependencies.design
    implementation supportDependencies.recyclerView
    implementation supportDependencies.cardView
    implementation supportDependencies.constraintLayout

    // Arch Lifecycle
    implementation googleLibraries.archRoomRuntime
    kapt googleLibraries.archRoomComp
    annotationProcessor googleLibraries.archRoomComp
    implementation googleLibraries.archRoomRx
    implementation googleLibraries.archLcExt
    implementation googleLibraries.archLcJava

    // Data Binding
    implementation googleLibraries.dataBinding

    // Network
    implementation libraries.retrofit
    implementation libraries.retrofitRx2
    implementation libraries.retrofitGson
    implementation libraries.okhttp
    implementation libraries.okhttpLogging
    implementation libraries.rxAndroid

    // Image
    implementation libraries.glide
    kapt libraries.glideCompiler

    // Utils
    implementation libraries.stetho
    implementation libraries.calligraphy

    // Test Libraries
    implementation testLibraries.junit
    implementation testLibraries.junitRunner
    implementation testLibraries.espressoCore
    implementation testLibraries.mockito
    implementation testLibraries.mockitoKotlin
}
